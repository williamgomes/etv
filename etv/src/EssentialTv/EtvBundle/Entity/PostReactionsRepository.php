<?php

namespace EssentialTv\EtvBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * RegisterRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostReactionsRepository extends EntityRepository {

    /**
     * Get Reaction & Response against that reaction
     *
     * @return \EssentialTv\EtvBundle\Entity\Episodes 
     */
   
    
    public function getPostsReactionsAndResponse($episodeId) {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("R1.reactionText, R1.reactionCreatedOn, R1.reactionId, R1.reactionPostId")
                ->addSelect("u.userFirstName,u.userProfilePicture")
                ->addSelect("(SELECT COUNT(R2) FROM EssentialTvEtvBundle:PostReactions AS R2 WHERE R2.reactionParentId=R1.reactionId) AS ResponseCount")
                ->from('EssentialTvEtvBundle:PostReactions', 'R1')
                ->leftJoin("EssentialTvEtvBundle:Users", "u", "WITH", "u.userId=R1.reactionUserId")
                ->where('R1.reactionPostId = :episodeId')
                ->andWhere('R1.reactionParentId = 0')
                ->setParameter('episodeId', $episodeId)
                ->orderBy('R1.reactionCreatedOn', 'DESC');

        
        $strQuery = $query->getQuery();
        
        return $strQuery->execute();
    }
    
    public function getRepliesOnReactions($user)
    {
        return $this->getEntityManager()
                        ->createQuery(
                            'SELECT r.reactionId,r.reactionEpisodeId,r.reactionUserId,r.reactionText,r.reactionEpisodeId,u.userFirstName,u.userProfilePicture,e.episodeTitle
                            FROM EssentialTvEtvBundle:Reactions r
                            LEFT JOIN EssentialTvEtvBundle:Users as u With u.userId = r.reactionUserId
                            LEFT JOIN EssentialTvEtvBundle:Episodes as e With e.episodeId = r.reactionEpisodeId
                            Where r.reactionParentId in (select r2.reactionId from EssentialTvEtvBundle:Reactions r2 
                            where r2.reactionUserId = :userId) order by r.reactionCreatedOn 
                            ')
                            ->setParameter('userId', $user)
                            ->getResult();
    }

}
