<?php

namespace EssentialTv\EtvBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RegisterRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EpisodeRatingsRepository extends EntityRepository {

    /**
     * Get Reaction & Response against that reaction
     *
     * @return \EssentialTv\EtvBundle\Entity\Episodes 
     */
    public function getRatingCountPerUser() {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("COUNT(ER.erId) AS RatingCount")
                ->addSelect("ER.erUserId")
                ->from('EssentialTvEtvBundle:EpisodeRatings', 'ER')
//                ->leftJoin("EssentialTvEtvBundle:Episodes", "Ep", "WITH", "Ep.episodeId=CSE.cseEpisodeId")
                ->groupBy('ER.erUserId');


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    
    public function getHighestRatingUser() {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("COUNT(ER.erId) AS ERCount")
                ->addSelect("ER.erUserId")
                ->addSelect("S.showId,S.showTitle")
                ->from('EssentialTvEtvBundle:EpisodeRatings', 'ER')
                ->leftJoin("EssentialTvEtvBundle:Shows", "S", "WITH", "S.showId=ER.erShowId")
//                ->where("USSE.usseUserId = :userId")
//                ->setParameter("userId", $userId)
//                ->orderBy('USSE.usseCreatedOn', 'DESC');
                ->groupBy("ER.erShowId")
                ->addGroupBy("ER.erUserId");

        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }
    
    
    public function getRatingCountUser($userId) {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("COUNT(ER.erId) AS RatingCount")
                ->from('EssentialTvEtvBundle:EpisodeRatings', 'ER')
//                ->leftJoin("EssentialTvEtvBundle:Episodes", "Ep", "WITH", "Ep.episodeId=CSE.cseEpisodeId")
                ->where("ER.erUserId = :userId")
                ->setParameter("userId", $userId);


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

}
