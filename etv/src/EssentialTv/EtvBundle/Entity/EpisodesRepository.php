<?php

namespace EssentialTv\EtvBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RegisterRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EpisodesRepository extends EntityRepository {

    /**
     * Get Reaction & Response against that reaction
     *
     * @return \EssentialTv\EtvBundle\Entity\Episodes 
     */
    public function getAllEpisodes() {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("E.episodeId, E.episodeShowId, E.episodeSeasonId")
                ->from('EssentialTvEtvBundle:Episodes', 'E');


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    public function getEpisodesFromShowOrderDesc($showID) {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT E
                            FROM EssentialTvEtvBundle:Episodes AS E
                            Where E.episodeShowId = :showID
                            Order By E.episodeCreatedOn DESC')
                        ->setParameter('showID', $showID)
                        ->getResult();
    }
    
    
    public function getEpisodesFromShowOrderBySeason($showID) {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT E
                            FROM EssentialTvEtvBundle:Episodes AS E
                            Where E.episodeShowId = :showID
                            Order By E.episodeSeasonId DESC,E.episodeNumber DESC')
                        ->setParameter('showID', $showID)
                        ->getResult();
    }

    public function getEpisodeByCharactersOrderDesc($characterID) {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("Ep")
                ->from('EssentialTvEtvBundle:CharacterSeasonEpisode', 'CSE')
                ->leftJoin("EssentialTvEtvBundle:Episodes", "Ep", "WITH", "Ep.episodeId=CSE.cseEpisodeId")
                ->where('CSE.cseCharacterId = :characterID')
                ->setParameter('characterID', $characterID)
                ->orderBy('CSE.cseCreatedOn', 'DESC');


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    public function getEpisodeRating($episodeId) {

        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT e.episodeId,(e.episodeEssentialCountTotal * 100) / (e.episodeEssentialCountTotal + e.episodeNotEssentialCountTotal) as percent
                            FROM EssentialTvEtvBundle:Episodes e where e.episodeId = :episodeId')
                        ->setParameter('episodeId', $episodeId)
                        ->getResult();
    }

    public function getEpisodeSuggestion($keyword = '', $showId = 0) {

        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("E.episodeTitle")
                ->addSelect("E.episodeId")
                ->addSelect("E.episodeSeasonId")
                ->from('EssentialTvEtvBundle:Episodes', 'E');

        $query->where(
                        $query->expr()->like('E.episodeTitle', ':keyword')
                )
                ->setParameter('keyword', '%' . $keyword . '%')
                ->andWhere("E.episodeShowId = :showId")
                ->setParameter('showId', $showId)
                ->orderBy('E.episodeTitle', 'ASC')
                ->setMaxResults(10);


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

}
