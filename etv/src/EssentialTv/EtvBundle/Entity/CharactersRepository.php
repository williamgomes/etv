<?php

namespace EssentialTv\EtvBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * RegisterRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CharactersRepository extends EntityRepository {

    /**
     * Get Reaction & Response against that reaction
     *
     * @return \EssentialTv\EtvBundle\Entity\Characters 
     */
    public function getAllCharacters() {
        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("C.characterId, C.characterTitle, C.characterAliasOne, C.characterAliasTwo, C.characterAliasThree, C.characterAliasFour")
                ->from('EssentialTvEtvBundle:Characters', 'C')
                ->orderBy('C.characterId', 'ASC');


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    public function getCharactersShow($showID = 0) {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT ch
                            FROM EssentialTvEtvBundle:Characters AS ch
                            Where ch.characterShowId = :showID')
                        ->setParameter('showID', $showID)
                        ->getResult();
    }

    public function getCharacterSuggestion($keyword = '') {

        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("Char.characterTitle")
                ->addSelect("Char.characterId")
                ->addSelect("Char.characterOriginalDataSupersede")
                ->addSelect("Char.characterApiImages")
                ->addSelect("Char.characterBannerImage")
                ->addSelect("S.showTitle")
                ->from('EssentialTvEtvBundle:Characters', 'Char');

        $query->where(
                        $query->expr()->like('Char.characterTitle', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasOne', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasTwo', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasThree', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasFour', ':keyword')
                )
                ->leftJoin("EssentialTvEtvBundle:CharacterShow", "CharS", "WITH", "CharS.csCharacterId=Char.characterId")
                ->leftJoin("EssentialTvEtvBundle:Shows", "S", "WITH", "S.showId=CharS.csShowId")
                ->setParameter('keyword', '%' . $keyword . '%')
                ->orderBy('Char.characterTitle', 'ASC')
                ->setMaxResults(8);


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }
    
    public function getCharacterSuggestionShow($keyword = '',$showId) {

        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("Char.characterTitle")
                ->addSelect("Char.characterId")
                ->addSelect("Char.characterOriginalDataSupersede")
                ->addSelect("Char.characterApiImages")
                ->addSelect("Char.characterBannerImage")
                ->addSelect("S.showTitle")
                ->from('EssentialTvEtvBundle:Characters', 'Char');

        $query->where(
                        $query->expr()->like('Char.characterTitle', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasOne', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasTwo', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasThree', ':keyword')
                )
                ->orWhere(
                        $query->expr()->like('Char.characterAliasFour', ':keyword')
                )
                ->andWhere('CharS.csShowId = :showId')
                ->leftJoin("EssentialTvEtvBundle:CharacterShow", "CharS", "WITH", "CharS.csCharacterId=Char.characterId")
                ->leftJoin("EssentialTvEtvBundle:Shows", "S", "WITH", "S.showId=CharS.csShowId")
                ->setParameter('keyword', '%' . $keyword . '%')
                ->setParameter('showId',  $showId)
                ->orderBy('Char.characterTitle', 'ASC')
                ->setMaxResults(8);


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    public function getCharacterFromShowOrderDesc($showID) {

        $query = $this->getEntityManager()
                ->createQueryBuilder()
                ->select("C")
                ->from('EssentialTvEtvBundle:CharacterShow', 'CS')
                ->leftJoin("EssentialTvEtvBundle:Characters", "C", "WITH", "C.characterId=CS.csCharacterId")
                ->where('CS.csShowId = :showID')
                ->setParameter('showID', $showID)
                ->orderBy('CS.csCreatedOn', 'DESC');


        $strQuery = $query->getQuery();

        return $strQuery->execute();
    }

    public function getShowCharecters($showId) {

        return $this->getEntityManager()->createQuery(
                                'SELECT c.characterId,c.characterTitle,c.characterBannerImage
                                FROM EssentialTvEtvBundle:Characters c
                                Where c.characterId in (select cs.csCharacterId from EssentialTvEtvBundle:CharacterShow cs where cs.csShowId = :showId)')
                        ->setParameter('showId', $showId)
                        ->getResult();
    }

}
