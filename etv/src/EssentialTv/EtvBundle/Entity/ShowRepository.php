<?php

namespace EssentialTv\EtvBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RegisterRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShowRepository extends EntityRepository {

    /**
     * Get Reaction & Response against that reaction
     *
     * @return \EssentialTv\EtvBundle\Entity\Episodes 
     */
    
    public function getFourRecentEpisodes(){
		 return $this->getEntityManager()
                        ->createQuery(
                            'SELECT p.episodeId, p.episodeTitle,p.episodeBannerImage
                            FROM EssentialTvEtvBundle:Episodes p
                            Where p.episodeTitle!= :title
                            Order By p.episodeScreeningDate DESC')
                            ->setParameter('title', '')
                            ->setMaxResults(3)
                            ->setFirstResult(0)
                            ->getResult();
    }
    
    public function getMostPopularPost()
    {
        return $this->getEntityManager()
                        ->createQuery(
                            'SELECT p.postId, p.postTitle,p.postShowIds,p.postCoverImage
                            FROM EssentialTvEtvBundle:Posts p
                            Where p.postTitle!= :title
                            Order By p.postPopularity')
                            ->setParameter('title', '')
                            ->setMaxResults(1)
                            ->setFirstResult(0)
                            ->getResult();
    }
    
    public function getPostList($filter,$offset,$limit)
    {
         if ($filter == "Popular")
               {
                   $orderBy = "Order By p.postPopularity DESC";
               }
        else if($filter == "Newest")
               {
                   $orderBy = "Order By p.postCreatedOn DESC";
               }
        else if($filter == "Trending")
               {     
                     $backDate = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( date("Y-m-d") ) ) . "-1 month" ) );
                     $orderBy = " WHERE p.postCreatedOn > ".$backDate." Order By p.postPopularity DESC";
               }
        return $this->getEntityManager()
                        ->createQuery(
                            'SELECT p.postId, p.postTitle,p.postShowIds,
                            p.postCoverImage,p.postAbout,p.postCreatedOn
                            FROM EssentialTvEtvBundle:Posts p '.$orderBy)
                            ->setMaxResults($limit)
                            ->setFirstResult($offset)
                            ->getResult();
    }
    
    public function getShowList($filter,$offset,$limit)
    {
        $orderBy = 'Order By s.showPopularity' ;
        if($filter!="")
        {
           $orderBy =  'Order By s.showTitle';
        }
        
        return $this->getEntityManager()
                        ->createQuery(
                            'SELECT s.showId, s.showTitle,s.showBannerImage,s.showOriginalDataSupersede 
                            FROM EssentialTvEtvBundle:Shows s
                            Where s.showTitle like :title '.$orderBy)
                            ->setParameter('title', $filter."%")
                            ->setMaxResults($limit)
                            ->setFirstResult($offset)
                            ->getResult();
    }
    
    public function getShowBySlug($showSlug)
    { 
        $em = $this->getEntityManager();

        $query = $em->createQueryBuilder();

        $query->select('s')
                ->from('EssentialTvEtvBundle:Shows', 's')
                ->where("replace(s.showTitle,' ','') = :showSlug ")
                ->setParameter('showSlug', $showSlug);
        $result = $query->getQuery()->getResult();
        if($result)
            return $result[0];
        else return false;
    }
    
    public function getEpisodeList($showId,$offset,$limit)
    {
        return $this->getEntityManager()->createQuery(
                                'SELECT e.episodeId,e.episodeNumber,e.episodeSeasonId AS episodeSeason,e.episodeTitle,e.episodeOriginalSummary,e.episodeApiSummary,e.episodeOriginalSummary,e.episodeScreeningDate,
                                e.episodeBannerImage,e.originalDataSupersede,(e.episodeEssentialCountTotal * 100) / (e.episodeEssentialCountTotal + e.episodeNotEssentialCountTotal) as percent 
                                FROM EssentialTvEtvBundle:Episodes e
                                Where e.episodeShowId = :showId Order By e.episodeScreeningDate Desc')
                                ->setParameter('showId', $showId)
                                ->setMaxResults($limit)
                                ->setFirstResult($offset)
                                ->getResult();
    }
    
    public function getEpisodeListInShows($showId)
    {
        return $this->getEntityManager()->createQuery(
                                'SELECT e.episodeId,e.episodeNumber,e.episodeSeasonId AS episodeSeason,e.episodeTitle,
                                e.episodeBannerImage
                                FROM EssentialTvEtvBundle:Episodes e
                                Where e.episodeShowId in (:showId) Order By e.episodeNumber')
                                ->setParameter('showId', $showId)
                                ->getResult();
    }
    
    
      public function getAllShows(){
        return $this->getEntityManager()
                        ->createQuery(
                            'SELECT s.showId, s.showTitle,s.showBannerImage
                            FROM EssentialTvEtvBundle:Shows s  Where s.showStatus = :status order by s.showTitle')
                            ->setParameter('status', "active")
                            ->getResult();
    }
    
    
    public function getSearchResult($query){
        $shows = $this->getEntityManager()
                        ->createQuery(
                            'SELECT s.showId as id, s.showTitle as title,s.showBannerImage as image
                            FROM EssentialTvEtvBundle:Shows s  Where s.showTitle like :query and s.showStatus = :status ')
                            ->setParameter('status', "active")
                            ->setParameter('query', $query."%")
                            ->getResult();
        $showsArr = array();
        $episodeArr = array();
        foreach($shows as $show)
        {
            $show["url"]="/show/selected/".$show['id'];
            $showsArr[] = $show;
        }
        $episodes = $this->getEntityManager()
                        ->createQuery(
                            'SELECT e.episodeId as id, e.episodeTitle as title,e.episodeBannerImage as image 
                            FROM EssentialTvEtvBundle:Episodes e  Where e.episodeTitle like :query and e.episodeStatus = :status 
                            ')
                            ->setParameter('status', "active")
                            ->setParameter('query', $query."%")
                            ->getResult();
        foreach($episodes as $episode)
        {
            $episode["url"]="/episode/".$episode["id"]."/". str_replace(" ","-", $episode["title"]);
            $showsArr[] = $episode;
        }
        $posts = $this->getEntityManager()
                        ->createQuery(
                            'SELECT e.postId as id, e.postTitle as title,e.postCoverImage as image 
                            FROM EssentialTvEtvBundle:Posts e  Where e.postTitle like :query and e.postStatus = :status 
                            ')
                            ->setParameter('status', "active")
                            ->setParameter('query', $query."%")
                            ->getResult();
        foreach($posts as $episode)
        {
            $episode["url"]="/post/view/".$episode["id"];
            $showsArr[] = $episode;
        }
        
        return $showsArr;
    }

}
